/*
 * generated by Xtext 2.15.0
 */
package pucrs.lp.scheme.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import pucrs.lp.scheme.scheme.Model

@ExtendWith(InjectionExtension)
@InjectWith(SchemeInjectorProvider)
class SchemeParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	/*Alguns dos testes abaixo foram baseados em estudos e pesquisas feitas nos respectivos links:
	 * 
	 * 	Scheme - Expressions (https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html);
	 *  Using 'Define' in Scheme (https://stackoverflow.com/questions/15959319/using-define-in-scheme);
	 *  Scheme (https://www.csc.lsu.edu/~gb/csc4101/Slides/Scheme.pdf);
	 *  Scheme Basics (https://courses.cs.washington.edu/courses/cse341/03wi/scheme/basics.html);
	 * 
	 */
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			10
		''')
		Assertions.assertNotNull(result)
		Assertions.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void loadModel1() {
		val result = parseHelper.parse('''
			(- n 1)
		''')
		Assertions.assertNotNull(result)
		Assertions.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void operacaoAritmeticaTest() {
		val result = parseHelper.parse('''
			(+ 2 3)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void defineTest() {
		val result = parseHelper.parse('''
			(define x 10)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void defineComParametroTest() {
		val result = parseHelper.parse('''
			(define (f x)
			  (+ x 1))
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void condicionalTest() {
		val result = parseHelper.parse('''
			(if (= 1 2) 
				1 
				0
			)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void condicionalAninhadoTest() {
		val result = parseHelper.parse('''
			(if (= 1 2) 
				1 
				(if (= 3 3) 
					11 
					00
				)
			)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
