/*
 * generated by Xtext 2.17.0
 */
package pucrs.lp.scheme.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import pucrs.lp.scheme.scheme.Command;
import pucrs.lp.scheme.scheme.Conditional;
import pucrs.lp.scheme.scheme.Define;
import pucrs.lp.scheme.scheme.Model;
import pucrs.lp.scheme.scheme.Operation;
import pucrs.lp.scheme.scheme.SchemePackage;
import pucrs.lp.scheme.scheme.SimpleOperation;
import pucrs.lp.scheme.services.SchemeGrammarAccess;

@SuppressWarnings("all")
public class SchemeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SchemeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SchemePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SchemePackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case SchemePackage.CONDITIONAL:
				sequence_Conditional(context, (Conditional) semanticObject); 
				return; 
			case SchemePackage.DEFINE:
				sequence_Define(context, (Define) semanticObject); 
				return; 
			case SchemePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SchemePackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case SchemePackage.PARAMETER:
				sequence_Parameter(context, (pucrs.lp.scheme.scheme.Parameter) semanticObject); 
				return; 
			case SchemePackage.SIMPLE_OPERATION:
				sequence_SimpleOperation(context, (SimpleOperation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     atom=Atom
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemePackage.Literals.COMMAND__ATOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemePackage.Literals.COMMAND__ATOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandAccess().getAtomAtomParserRuleCall_4_0(), semanticObject.getAtom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Conditional
	 *     Conditional returns Conditional
	 *
	 * Constraint:
	 *     (at+=Atom value2=INT commands+=Command+)
	 */
	protected void sequence_Conditional(ISerializationContext context, Conditional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Define
	 *     Define returns Define
	 *
	 * Constraint:
	 *     ((name1=ID | parameters+=Parameter) command=Command)
	 */
	protected void sequence_Define(ISerializationContext context, Define semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Operation
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (operator+=Operator (simpleOperation+=SimpleOperation | atom2+=Atom)+)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Parameter
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (n=ID atom=Atom)
	 */
	protected void sequence_Parameter(ISerializationContext context, pucrs.lp.scheme.scheme.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchemePackage.Literals.PARAMETER__N) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemePackage.Literals.PARAMETER__N));
			if (transientValues.isValueTransient(semanticObject, SchemePackage.Literals.COMMAND__ATOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchemePackage.Literals.COMMAND__ATOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNIDTerminalRuleCall_1_0(), semanticObject.getN());
		feeder.accept(grammarAccess.getParameterAccess().getAtomAtomParserRuleCall_2_0(), semanticObject.getAtom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleOperation returns SimpleOperation
	 *
	 * Constraint:
	 *     (operator+=Operator value+=Atom+)
	 */
	protected void sequence_SimpleOperation(ISerializationContext context, SimpleOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
