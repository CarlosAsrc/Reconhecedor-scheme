/*
 * generated by Xtext 2.17.0
 */
package pucrs.lp.scheme.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SchemeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Assignment cAtomAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAtomAtomParserRuleCall_4_0 = (RuleCall)cAtomAssignment_4.eContents().get(0);
		
		//Command:
		//	Operation | Define | Parameter | Conditional | atom=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation | Define | Parameter | Conditional | atom=Atom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_0() { return cOperationParserRuleCall_0; }
		
		//Define
		public RuleCall getDefineParserRuleCall_1() { return cDefineParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_3() { return cConditionalParserRuleCall_3; }
		
		//atom=Atom
		public Assignment getAtomAssignment_4() { return cAtomAssignment_4; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_4_0() { return cAtomAtomParserRuleCall_4_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorTerminalRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSimpleOperationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSimpleOperationSimpleOperationParserRuleCall_2_0_0 = (RuleCall)cSimpleOperationAssignment_2_0.eContents().get(0);
		private final Assignment cAtom2Assignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAtom2AtomParserRuleCall_2_1_0 = (RuleCall)cAtom2Assignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Operation:
		//	"(" operator+=Operator (simpleOperation+=SimpleOperation | atom2+=Atom)+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" operator+=Operator (simpleOperation+=SimpleOperation | atom2+=Atom)+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operator+=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorTerminalRuleCall_1_0() { return cOperatorOperatorTerminalRuleCall_1_0; }
		
		//(simpleOperation+=SimpleOperation | atom2+=Atom)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//simpleOperation+=SimpleOperation
		public Assignment getSimpleOperationAssignment_2_0() { return cSimpleOperationAssignment_2_0; }
		
		//SimpleOperation
		public RuleCall getSimpleOperationSimpleOperationParserRuleCall_2_0_0() { return cSimpleOperationSimpleOperationParserRuleCall_2_0_0; }
		
		//atom2+=Atom
		public Assignment getAtom2Assignment_2_1() { return cAtom2Assignment_2_1; }
		
		//Atom
		public RuleCall getAtom2AtomParserRuleCall_2_1_0() { return cAtom2AtomParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SimpleOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.SimpleOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorTerminalRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAtomParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleOperation:
		//	"(" operator+=Operator value+=Atom+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" operator+=Operator value+=Atom+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operator+=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorTerminalRuleCall_1_0() { return cOperatorOperatorTerminalRuleCall_1_0; }
		
		//value+=Atom+
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Atom
		public RuleCall getValueAtomParserRuleCall_2_0() { return cValueAtomParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cName1Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cName1IDTerminalRuleCall_2_0_0 = (RuleCall)cName1Assignment_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Assignment cCommandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandCommandParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Define:
		//	"(" "define" (name1=ID | parameters+=Parameter) command=Command ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "define" (name1=ID | parameters+=Parameter) command=Command ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//name1=ID | parameters+=Parameter
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name1=ID
		public Assignment getName1Assignment_2_0() { return cName1Assignment_2_0; }
		
		//ID
		public RuleCall getName1IDTerminalRuleCall_2_0_0() { return cName1IDTerminalRuleCall_2_0_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//command=Command
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_3_0() { return cCommandCommandParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAtAtomParserRuleCall_4_0 = (RuleCall)cAtAssignment_4.eContents().get(0);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2INTTerminalRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCommandsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommandsCommandParserRuleCall_7_0 = (RuleCall)cCommandsAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Conditional:
		//	'(' 'if' '(' '=' at+=Atom value2=INT ')' commands+=Command+ ')'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'if' '(' '=' at+=Atom value2=INT ')' commands+=Command+ ')'?
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//at+=Atom
		public Assignment getAtAssignment_4() { return cAtAssignment_4; }
		
		//Atom
		public RuleCall getAtAtomParserRuleCall_4_0() { return cAtAtomParserRuleCall_4_0; }
		
		//value2=INT
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//INT
		public RuleCall getValue2INTTerminalRuleCall_5_0() { return cValue2INTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//commands+=Command+
		public Assignment getCommandsAssignment_7() { return cCommandsAssignment_7; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_7_0() { return cCommandsCommandParserRuleCall_7_0; }
		
		//')'?
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNIDTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		private final Assignment cAtomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtomAtomParserRuleCall_2_0 = (RuleCall)cAtomAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//	"(" n=ID atom=Atom ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" n=ID atom=Atom ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//n=ID
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//ID
		public RuleCall getNIDTerminalRuleCall_1_0() { return cNIDTerminalRuleCall_1_0; }
		
		//atom=Atom
		public Assignment getAtomAssignment_2() { return cAtomAssignment_2; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_2_0() { return cAtomAtomParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Atom:
		//	ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final OperationElements pOperation;
	private final SimpleOperationElements pSimpleOperation;
	private final DefineElements pDefine;
	private final ConditionalElements pConditional;
	private final ParameterElements pParameter;
	private final AtomElements pAtom;
	private final TerminalRule tOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SchemeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.pOperation = new OperationElements();
		this.pSimpleOperation = new SimpleOperationElements();
		this.pDefine = new DefineElements();
		this.pConditional = new ConditionalElements();
		this.pParameter = new ParameterElements();
		this.pAtom = new AtomElements();
		this.tOperator = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pucrs.lp.scheme.Scheme.Operator");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pucrs.lp.scheme.Scheme".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command:
	//	Operation | Define | Parameter | Conditional | atom=Atom;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Operation:
	//	"(" operator+=Operator (simpleOperation+=SimpleOperation | atom2+=Atom)+ ")";
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//SimpleOperation:
	//	"(" operator+=Operator value+=Atom+ ")";
	public SimpleOperationElements getSimpleOperationAccess() {
		return pSimpleOperation;
	}
	
	public ParserRule getSimpleOperationRule() {
		return getSimpleOperationAccess().getRule();
	}
	
	//Define:
	//	"(" "define" (name1=ID | parameters+=Parameter) command=Command ")";
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//Conditional:
	//	'(' 'if' '(' '=' at+=Atom value2=INT ')' commands+=Command+ ')'?;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//Parameter:
	//	"(" n=ID atom=Atom ")";
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Atom:
	//	ID | INT;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//terminal Operator:
	//	"+" | "-" | "/" | "*";
	public TerminalRule getOperatorRule() {
		return tOperator;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
