/*
 * generated by Xtext 2.17.0
 */
package pucrs.lp.scheme.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import pucrs.lp.scheme.ide.contentassist.antlr.internal.InternalSchemeParser;
import pucrs.lp.scheme.services.SchemeGrammarAccess;

public class SchemeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SchemeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SchemeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives_2(), "rule__Operation__Alternatives_2");
			builder.put(grammarAccess.getDefineAccess().getAlternatives_2(), "rule__Define__Alternatives_2");
			builder.put(grammarAccess.getDefineAccess().getAlternatives_3(), "rule__Define__Alternatives_3");
			builder.put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getSimpleOperationAccess().getGroup(), "rule__SimpleOperation__Group__0");
			builder.put(grammarAccess.getDefineAccess().getGroup(), "rule__Define__Group__0");
			builder.put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getModelAccess().getCommandsAssignment(), "rule__Model__CommandsAssignment");
			builder.put(grammarAccess.getCommandAccess().getValueAssignment_4(), "rule__Command__ValueAssignment_4");
			builder.put(grammarAccess.getOperationAccess().getOperatorAssignment_1(), "rule__Operation__OperatorAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getSimpleOperationAssignment_2_0(), "rule__Operation__SimpleOperationAssignment_2_0");
			builder.put(grammarAccess.getOperationAccess().getAtomAssignment_2_1(), "rule__Operation__AtomAssignment_2_1");
			builder.put(grammarAccess.getSimpleOperationAccess().getOperatorAssignment_1(), "rule__SimpleOperation__OperatorAssignment_1");
			builder.put(grammarAccess.getSimpleOperationAccess().getValueAssignment_2(), "rule__SimpleOperation__ValueAssignment_2");
			builder.put(grammarAccess.getDefineAccess().getName1Assignment_2_0(), "rule__Define__Name1Assignment_2_0");
			builder.put(grammarAccess.getDefineAccess().getParametersAssignment_2_1(), "rule__Define__ParametersAssignment_2_1");
			builder.put(grammarAccess.getDefineAccess().getAtons2Assignment_3_0(), "rule__Define__Atons2Assignment_3_0");
			builder.put(grammarAccess.getDefineAccess().getParametersAssignment_3_1(), "rule__Define__ParametersAssignment_3_1");
			builder.put(grammarAccess.getDefineAccess().getOperationAssignment_3_2(), "rule__Define__OperationAssignment_3_2");
			builder.put(grammarAccess.getConditionalAccess().getAtAssignment_4(), "rule__Conditional__AtAssignment_4");
			builder.put(grammarAccess.getConditionalAccess().getValue2Assignment_5(), "rule__Conditional__Value2Assignment_5");
			builder.put(grammarAccess.getConditionalAccess().getValue3Assignment_7(), "rule__Conditional__Value3Assignment_7");
			builder.put(grammarAccess.getParameterAccess().getNAssignment_1(), "rule__Parameter__NAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getAtomAssignment_2(), "rule__Parameter__AtomAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SchemeGrammarAccess grammarAccess;

	@Override
	protected InternalSchemeParser createParser() {
		InternalSchemeParser result = new InternalSchemeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SchemeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SchemeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
